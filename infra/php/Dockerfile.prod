FROM php:8.1-fpm-buster

# Composer設定
ENV COMPOSER_ALLOW_SUPERUSER=1 \
    COMPOSER_HOME=/composer

# AWS関連の環境変数を追加
ARG AWS_DEFAULT_REGION
ARG AWS_SECRETS_MANAGER_SECRET_NAME
ENV AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
ENV AWS_SECRETS_MANAGER_SECRET_NAME=$AWS_SECRETS_MANAGER_SECRET_NAME

# Composerのインストール
COPY --from=composer:2.2 /usr/bin/composer /usr/bin/composer

# 必要なパッケージをインストール
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    nginx \
    git unzip libzip-dev libicu-dev libonig-dev bash && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    docker-php-ext-install intl pdo_mysql zip bcmath pdo

# PHPのproduction用設定ファイルをコピー
COPY infra/php/php.prod.ini /usr/local/etc/php/php.prod.ini

# Nginxのproduction用設定ファイルをコピー
COPY infra/nginx/nginx.prod.conf /etc/nginx/nginx.prod.conf
COPY infra/nginx/default.prod.conf /etc/nginx/conf.d/default.prod.conf

# エントリポイントスクリプト（production用）をコピー
COPY infra/php/docker-entrypoint.prod.sh /usr/local/bin/docker-entrypoint.prod.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.prod.sh

# 作業ディレクトリを指定
WORKDIR /var/www

# アプリケーションのコードをコピー
COPY ./src /var/www

# Composerの依存関係をインストール
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN php -d memory_limit=-1 /usr/bin/composer install --no-dev --optimize-autoloader 2>&1 | tee /tmp/composer_log.txt && \
    if [ $? -ne 0 ]; then \
    echo "Composer install failed. Log:" && \
    cat /tmp/composer_log.txt && \
    exit 1; \
    fi

# アプリケーションの権限設定
RUN chown -R www-data:www-data /var/www

# ポート80を公開
EXPOSE 80

# エントリポイントスクリプトを実行（production用）
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.prod.sh"]

# サービスの起動コマンド
CMD ["sh", "-c", "php-fpm -D && nginx -g 'daemon off;'"]
